title: 正则表达式+Python摘录
date: 2015-08-02 14:22:21
tags: 经验

---
##正则表达式
正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。
给定一个正则表达式和另一个字符串，我们可以达到如下的目的：
 - 给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）；
 - 可以通过正则表达式，从字符串中获取我们想要的特定部分。
正则表达式的特点是：
 - 灵活性、逻辑性和功能性非常的强；
 - 可以迅速地用极简单的方式达到字符串的复杂控制。
 - 对于刚接触的人来说，比较晦涩难懂。
###符号
正则表达式由一些普通字符和一些元字符（metacharacters）组成。普通字符包括大小写的字母和数字，而元字符则具有特殊的含义。
下表列出了所有的元字符和对它们的一个简短的描述：

> \ ： 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、
>或一个八进制转义符。例如，“\\n”匹配\n。“\n”匹配换行符。序列“\\”匹配“\”而“\(”则匹配“(”。即相当于多种编程语言中都有的“转义字符”的概念
。
^ ： 匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\n”或“\r”之后的位置。
$ ： 匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\n”或“\r”之前的位置。
* ： 匹配前面的子表达式任意次。例如，zo*能匹配“z”，“zo”以及“zoo”。*等价于{0,}。
+ ： 匹配前面的子表达式一次或多次(大于等于1次）。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。
? ： 匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。
{n} ： n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。
{n,} ： n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。 
{n,m} ： m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。
? ： 当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。
.点 ： 匹配除“\r\n”之外的任何单个字符。要匹配包括“\r\n”在内的任何字符，请使用像“[\s\S]”的模式。
(pattern) ： 匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“\(”或“\)”。
(?:pattern) ： 匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。
(?=pattern) ： 正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。
(?!pattern) ： 正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。
(?<=pattern) ： 反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?<=95|98|NT|2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。
(?<!pattern) ： 反向否定预查，与正向否定预查类似，只是方向相反。例如“(?<!95|98|NT|2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。
x|y ： 匹配x或y。例如，“z|food”能匹配“z”或“food”或"zood"(此处请谨慎)。“(z|f)ood”则匹配“zood”或“food”。
[xyz] ：　字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。
[^xyz]　：　负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”。
[a-z]　：　字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。
注意:只有连字符在字符组内部时,并且出现在两个字符之间时,才能表示字符的范围; 如果出字符组的开头,则只能表示连字符本身.
[^a-z]　：　负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。
\b　：　匹配一个单词边界，也就是指单词和空格间的位置（即正则表达式的“匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的\b就是匹配位置的）。例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。
\B　：　匹配非单词边界。“er\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。
\cx　：　匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。
\d　：　匹配一个数字字符。等价于[0-9]。
\D　：　匹配一个非数字字符。等价于[^0-9]。
\f　：　匹配一个换页符。等价于\x0c和\cL。
\n　：　匹配一个换行符。等价于\x0a和\cJ。
\r　：　匹配一个回车符。等价于\x0d和\cM。
\s　：　匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。
\S　：　匹配任何可见字符。等价于[^ \f\n\r\t\v]。
\t　：　匹配一个制表符。等价于\x09和\cI。
\v　：　匹配一个垂直制表符。等价于\x0b和\cK。
\w　：　匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的"单词"字符使用Unicode字符集。
\W　：　匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。
\xn　：　匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\x41”匹配“A”。“\x041”则等价于“\x04&1”。正则表达式中可以使用ASCII编码。
\num　：　匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\1”匹配两个连续的相同字符。
\n　：　标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。
\nm　：　标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。
\nml　：　如果n为八进制数字（0-7），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。
\un　：　匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（&copy;）。
\< \>　：　	匹配词（word）的开始（\<）和结束（\>）。例如正则表达式\<the\>能够匹配字符串"for the wise"中的"the"，但是不能匹配字符串"otherwise"中的"the"。注意：这个元字符不是所有的软件都支持的。
\( \)　：　	将 \( 和 \)之间的表达式定义为“组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用 \1 到\9 的符号来引用。
|　：　	将两个匹配条件进行逻辑“或”（Or）运算。例如正则表达式(him|her) 匹配"it belongs to him"和"it belongs to her"，但是不能匹配"it belongs to them."。注意：这个元字符不是所有的软件都支持的。
+　：　	匹配1或多个正好在它之前的那个字符。例如正则表达式9+匹配9、99、999等。注意：这个元字符不是所有的软件都支持的。
?　：　	匹配0或1个正好在它之前的那个字符。注意：这个元字符不是所有的软件都支持的。
{i} {i,j}　：　	匹配指定数目的字符，些字符是在它之前的表达式定义的。例如正则表达式A[0-9]{3}能够匹配字符"A"后面跟着正好3个数字字符的串，例如A123、A348等，但是不匹配A1234。而正则表达式[0-9]{4,6} 匹配连续的任意4个、5个或者6个数字。

## 实例
将所有方法foo(a,b,c)的实例改为foo(b,a,c)。这里a、b和c可以是任何提供给方法foo()的参数。也就是说我们要实现这样的转换：
foo(10,7,2) --> foo(7,10,2)
foo(x+13,y-2,10) --> foo(y-2,x+13,10)
foo( bar(8), x+y+z, 5) --> foo( x+y+z, bar(8), 5)
下面这条替换命令能够实现这一魔法：
:%s/foo(\([^,]*\),\([^,]*\),\([^,)]*\))/foo(\2,\1,\3)/g
让我们把它打散来加以分析。写出这个表达式的基本思路是找出foo()和它的括号中的三个参数的位置。第一个参数是用这个表达式来识别的：：\([^,]*\)，我们可以从里向外来分析它：
[^,] 除了逗号之外的任何字符
[^,]* 0或者多个非逗号字符
\([^,]*\) 将这些非逗号字符标记为\1，这样可以在之后的替换模式表达式中引用它
\([^,]*\), 我们必须找到0或者多个非逗号字符后面跟着一个逗号，并且非逗号字符那部分要标记出来以备后用。
## 速记技巧
等价：
　　?,*,+,\d,\w 都是等价字符
　　?等价于匹配长度{0,1}
　　*等价于匹配长度{0,} 
　　+等价于匹配长度{1,}
　　\d等价于[0-9]
　　\w等价于[A-Za-z_0-9]。
常用运算符与表达式：
　　^ 开始
　　（） 域段
　　[] 包含,默认是一个字符长度
　　[^] 不包含,默认是一个字符长度
　　{n,m} 匹配长度 
　　. 任何单个字符(\. 字符点)
　　| 或
　　\ 转义
　　$ 结尾
　　[A-Z] 26个大写字母
　　[a-z] 26个小写字母
　　[0-9] 0至9数字
　　[A-Za-z0-9] 26个大写字母、26个小写字母和0至9数字
　　， 分割
分割语法：
　　[A,H,T,W] 包含A或H或T或W字母
　　[a,h,t,w] 包含a或h或t或w字母
　　[0,3,6,8] 包含0或3或6或8数字

　　语法与释义：
　　基础语法 "^([]{})([]{})([]{})$"
　　正则字符串 = "开始（[包含内容]{长度}）（[包含内容]{长度}）（[包含内容]{长度}）结束" 
　　
　　?,*,+,\d,\w 这些都是简写的,完全可以用[]和{}代替，在(?:)(?=)(?!)(?<=)(?<!)(?i)(*?)(+?)这种特殊组合情况下除外。
　　初学者可以忽略?,*,+,\d,\w一些简写标示符，学会了基础使用再按表自己去等价替换。
　　
## Python　　
Python 的代码不需要编译。 
Python 的源码是不能加密的，是一门开源的语言。
Python 不需要分号。
### Python 的应用：

 - YouTube
 - Instagram
 - 豆瓣

### Python 的特殊缩进
```
age = 20
if age >= 18:
    print('your age is', age)
    print('adult')
```
根据 Python 的缩进规则，两个 print 语句都是属于 if 判断体内的执行语句。

在定义函数的时候也是根据缩进来判断从属关系。
```
def my_abs(x):
    if x >= 0:
        return x
    else:
        return -x
```
从这点来看，Python 代码不会像其他语言那样有各种不同的缩进也没关系，要让 Python 代码跑起来，必须按照它的规则，所以 Python 的代码可以很优雅。

Django 内置了非常多大量的应用，常用的包括：

 - 后台管理系统 damin
 - 用户认证系统 auth
 - 会话系统 sessions

### Django 安装

UBuntu 下已默认安装 Python 2.7.8 。在终端输入 python 即可进入解释器。但该解释器没有自动补齐的功能，非常不好用，所以推荐安装 iPython 。可以先安装 Python 的包管理器 pip 。

> sudo apt-get install python-pip

然后再安装 iPython

> sudo pip install ipython

或直接运行

> sudo apt-get install ipython

也可安装 iPython 。推荐先安装 pip 。

安装 Django

> sudo pip install django

接下来就可以启动我们第一个 Django 项目了。

进入到我们创建项目的文件夹，执行

> django-admin startproject test

test 为自定义的文件夹名称

进入 test 文件夹，发现有个 manage.py

> python manage.py runserver

即在本机上开起了本地服务器，端口为 8000

本地建立起的文件中

manage.py 用来管理整个项目，包括：数据库的建立、服务器运行、测试等。

运行 python namage.py 可以查看它有哪些服务。

在 test 目录下

settings.py 为配置文件，用来给应用、中间件、数据库、静态目录等进行配置。

urls.py 为 URL 映射配置文件，决定某个 URL 访问被那个函数响应。

wsgi.py 为 Python 应用程序或框架和 Web 服务器之间的接口。

### Django 中的应用

Django 中用应用（app）来分割功能模块。

在之前创建的 test 的基础上，我们执行

> python manage.py startapp blog

创建 blog 这个应用。

然后在 settings.py 里面将 blog 应用添加进去。

找到 INSTALLED_APPS 并在该元组内末端添加'blog',即可。

在 blog 文件夹内有许多 .py 文件。

其中 views.py 用来响应客户请求并返回一个 HTML 页面。

models.py 用来定义数据库中的表。

通过修改 views.py 来处理客户的请求并返回 HTML 页面，在里面定义函数：

> def hello(request):
    return HttpResponse('<html>Hello World!</html>') 
    
由于引用了 http 模块，所以在开头不要忘了引入 http 模块：
> from django.http import HttpResponse

定义了响应函数，还要在 /test 中的 urls.py 进行映射，打开该文件并在末端找到 urlpatterns ，添加一个对应 hello() 函数的映射：

> url(r'helloworld','blog.views.hello'),

url() 函数中的第一个参数为对应的请求 url 地址，可以通过一个正则表达式来进行匹配。第二个参数为访问该 url 所对应的映射函数，在上面这句话中表示对应 blog 应用中 views 里定义的 hello 函数。

在命令行中输入 

> python manage.py runserver

在浏览器中访问 http://localhost:8000/helloworld 即可以看到 Hello World!.

### Django 概述

在上面的例子中 Django 主要通过一下几个配置处理客户的 http 请求：

URL 配置（建立 URL 和响应函数之间的关系）

 - Views 视图层配置（响应客户的 http 请求，进行逻辑处理，返回 HTML 页面给客户）
 - Models 模型层配置（描述服务器存储的数据）
 - templates 模板配置（用来生产 HTML 页面。返回给用户的 HTML 是由 Models 和模板渲染出来的）。
